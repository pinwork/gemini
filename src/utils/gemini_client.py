#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import aiohttp
import asyncio
import ssl
import certifi
import time
from typing import Dict, Tuple, Optional
from aiohttp_socks import ProxyConnector, ProxyConnectionError, ProxyTimeoutError, ProxyError
from aiohttp import (
    ClientError, ClientConnectionError, ClientOSError, ClientConnectorError,
    ClientConnectorDNSError, ClientSSLError, ClientConnectorSSLError, 
    ClientConnectorCertificateError, ServerConnectionError, ServerDisconnectedError,
    ServerTimeoutError, ConnectionTimeoutError, SocketTimeoutError,
    ClientResponseError, ClientPayloadError, ClientConnectionResetError
)

try:
    from .proxy_config import ProxyConfig
    from .network_error_classifier import classify_exception
except ImportError:
    # Fallback –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫—É
    import sys
    from pathlib import Path
    sys.path.append(str(Path(__file__).parent))
    from proxy_config import ProxyConfig
    from network_error_classifier import classify_exception

# SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
SSL_CONTEXT = ssl.create_default_context(cafile=certifi.where())

# –¢–∞–π–º—ñ–Ω–≥–∏ —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è (—Ç–µ–ø–µ—Ä –±–µ–∑ START_DELAY_MS!)
MAX_CONCURRENT_STARTS = 1
CONNECT_TIMEOUT = 6
SOCK_CONNECT_TIMEOUT = 6
SOCK_READ_TIMEOUT = 240
TOTAL_TIMEOUT = 250
STAGE2_TIMEOUT_SECONDS = 90

# –ú–æ–¥–µ–ª—ñ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
DEFAULT_STAGE1_MODEL = "gemini-2.5-flash"
DEFAULT_STAGE2_MODEL = "gemini-2.0-flash"
DEFAULT_START_DELAY_MS = 700  # üÜï –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é —Ç–∞–π–º—ñ–Ω–≥—É
_stage_timing = {
    "stage1": {"last_request_time": 0, "semaphore": None},
    "stage2": {"last_request_time": 0, "semaphore": None}
}


class GeminiAPIError(Exception):
    """–í–∏–Ω—è—Ç–æ–∫ –¥–ª—è –ø–æ–º–∏–ª–æ–∫ Gemini API"""
    def __init__(self, message: str, status_code: Optional[int] = None, response_data: Optional[dict] = None):
        super().__init__(message)
        self.status_code = status_code
        self.response_data = response_data


class GeminiClient:
    """
    –ö–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Gemini API
    
    –ü—ñ–¥—Ç—Ä–∏–º—É—î –¥–≤–æ–µ—Ç–∞–ø–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –≤–µ–±-—Å–∞–π—Ç—ñ–≤:
    - Stage1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É —Å–∞–π—Ç—É —á–µ—Ä–µ–∑ urlContext
    - Stage2: –°—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –±—ñ–∑–Ω–µ—Å-–∞–Ω–∞–ª—ñ–∑ –ø–æ JSON —Å—Ö–µ–º—ñ
    """
    
    def __init__(self, 
                 stage1_model: str = DEFAULT_STAGE1_MODEL,
                 stage2_model: str = DEFAULT_STAGE2_MODEL,
                 stage2_schema: Optional[dict] = None,
                 start_delay_ms: int = DEFAULT_START_DELAY_MS):  # üÜï –ù–û–í–ò–ô –ü–ê–†–ê–ú–ï–¢–†
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Gemini –∫–ª—ñ—î–Ω—Ç
        
        Args:
            stage1_model: –ú–æ–¥–µ–ª—å –¥–ª—è Stage1 –∞–Ω–∞–ª—ñ–∑—É
            stage2_model: –ú–æ–¥–µ–ª—å –¥–ª—è Stage2 –∞–Ω–∞–ª—ñ–∑—É  
            stage2_schema: JSON —Å—Ö–µ–º–∞ –¥–ª—è Stage2 –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
            start_delay_ms: –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.stage1_model = stage1_model
        self.stage2_model = stage2_model
        self.stage2_schema = stage2_schema or {}
        self.start_delay_ms = start_delay_ms  # üÜï –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –í INSTANCE
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ–º–∞—Ñ–æ—Ä–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
        if _stage_timing["stage1"]["semaphore"] is None:
            _stage_timing["stage1"]["semaphore"] = asyncio.Semaphore(MAX_CONCURRENT_STARTS)
        if _stage_timing["stage2"]["semaphore"] is None:
            _stage_timing["stage2"]["semaphore"] = asyncio.Semaphore(MAX_CONCURRENT_STARTS)
    
    def format_api_error(self, raw_response: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É—î –ø–æ–º–∏–ª–∫—É API –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –≤–∏–≤–æ–¥—É
        
        Args:
            raw_response: –°–∏—Ä–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API
            
        Returns:
            –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏
        """
        try:
            error_data = json.loads(raw_response)
            if "error" in error_data:
                error = error_data["error"]
                code = error.get("code", "Unknown")
                status = error.get("status", "Unknown")
                message = error.get("message", "No message")
                return f"{code} {status}: {message}"
        except (json.JSONDecodeError, KeyError, AttributeError):
            pass
        
        return raw_response[:200] + "..." if len(raw_response) > 200 else raw_response
    
    async def _enforce_request_interval(self, stage_name: str) -> None:
        """
        –ó–∞–±–µ–∑–ø–µ—á—É—î –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è rate limits
        
        Args:
            stage_name: –ù–∞–∑–≤–∞ –µ—Ç–∞–ø—É ("stage1" –∞–±–æ "stage2")
        """
        stage_key = stage_name.lower()
        
        if stage_key not in _stage_timing:
            return
        
        async with _stage_timing[stage_key]["semaphore"]:
            current_time = time.time()
            last_time = _stage_timing[stage_key]["last_request_time"]
            time_since_last = current_time - last_time
            
            # üÜï –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û self.start_delay_ms –ó–ê–ú–Ü–°–¢–¨ –ö–û–ù–°–¢–ê–ù–¢–ò
            min_interval = self.start_delay_ms / 1000.0
            sleep_time = max(0, min_interval - time_since_last)
            
            if sleep_time > 0:
                await asyncio.sleep(sleep_time)
            
            _stage_timing[stage_key]["last_request_time"] = time.time()
    
    async def _make_request(self, 
                           proxy_config: ProxyConfig, 
                           url: str, 
                           payload: dict,
                           stage_name: str,
                           timeout_seconds: Optional[int] = None) -> Tuple[aiohttp.ClientResponse, dict]:
        """
        –í–∏–∫–æ–Ω—É—î HTTP –∑–∞–ø–∏—Ç –¥–æ Gemini API –∑ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ç–∞–π–º—ñ–Ω–≥—É
        
        Args:
            proxy_config: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–æ–∫—Å—ñ
            url: URL –¥–ª—è –∑–∞–ø–∏—Ç—É
            payload: –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
            stage_name: –ù–∞–∑–≤–∞ –µ—Ç–∞–ø—É –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é —Ç–∞–π–º—ñ–Ω–≥—É
            timeout_seconds: –ö–∞—Å—Ç–æ–º–Ω–∏–π timeout –¥–ª—è –∑–∞–ø–∏—Ç—É
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (response, response_data)
            
        Raises:
            GeminiAPIError: –ü—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö API
            Exception: –ü—Ä–∏ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø–æ–º–∏–ª–∫–∞—Ö
        """
        # –ö–æ–Ω—Ç—Ä–æ–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        await self._enforce_request_interval(stage_name)
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ timeout
        if timeout_seconds:
            timeout = aiohttp.ClientTimeout(
                total=timeout_seconds + 10,  # –î–æ–¥–∞—î–º–æ –±—É—Ñ–µ—Ä
                connect=CONNECT_TIMEOUT,
                sock_connect=SOCK_CONNECT_TIMEOUT,
                sock_read=timeout_seconds
            )
        else:
            timeout = aiohttp.ClientTimeout(
                total=TOTAL_TIMEOUT,
                connect=CONNECT_TIMEOUT,
                sock_connect=SOCK_CONNECT_TIMEOUT,
                sock_read=SOCK_READ_TIMEOUT
            )
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ headers
        headers = {"Content-Type": "application/json"}
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø—Ä–æ–∫—Å—ñ connector
        connector_params = proxy_config.get_connection_params()
        connector_params.update({
            'ssl': SSL_CONTEXT,
            'rdns': True
        })
        
        connector = ProxyConnector(**connector_params)
        
        async with aiohttp.ClientSession(connector=connector) as session:
            async with session.post(url, json=payload, headers=headers, timeout=timeout) as response:
                try:
                    resp_json = await response.json()
                    return response, resp_json
                except aiohttp.ContentTypeError:
                    resp_text = await response.text()
                    if len(resp_text) > 512:
                        resp_text = resp_text[:512] + "...[truncated]"
                    return response, resp_text
    
    def _parse_stage1_response(self, response_data: dict) -> Tuple[str, str]:
        """
        –ü–∞—Ä—Å–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å Stage1 –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è grounding status —Ç–∞ —Ç–µ–∫—Å—Ç—É
        
        Args:
            response_data: –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Gemini API
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (grounding_status, text_response)
        """
        candidates = response_data.get("candidates", [])
        if not candidates:
            return "NO_CANDIDATES", ""
        
        candidate = candidates[0]
        
        text_response = candidate.get("content", {}).get("parts", [{}])[0].get("text", "")
        
        url_metadata = candidate.get("urlContextMetadata", {}).get("urlMetadata", [])
        if not url_metadata:
            return "NO_URL_METADATA", text_response
        
        grounding_status = url_metadata[0].get("urlRetrievalStatus", "UNKNOWN")
        
        return grounding_status, text_response
    
    def _build_stage1_payload(self, target_uri: str, stage1_prompt: str, use_google_search: bool = True) -> dict:
        """
        –ë—É–¥—É—î payload –¥–ª—è Stage1 –∑–∞–ø–∏—Ç—É
        
        Args:
            target_uri: URI —Ü—ñ–ª—å–æ–≤–æ–≥–æ —Å–∞–π—Ç—É
            stage1_prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            use_google_search: –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Google Search —Ä–∞–∑–æ–º –∑ URL Context
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ payload –¥–ª—è API
        """
        user_message = f"Analyze website {target_uri}\n\n{stage1_prompt}"
        
        # –ë–∞–∑–æ–≤–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç - –∑–∞–≤–∂–¥–∏ URL Context
        tools = [{"urlContext": {}}]
        
        # –î–æ–¥–∞—î–º–æ Google Search —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if use_google_search:
            tools.append({"googleSearch": {}})
        
        return {
            "contents": [
                {
                    "role": "user",
                    "parts": [
                        {"text": user_message}
                    ]
                }
            ],
            "tools": tools,
            "generationConfig": {
                "temperature": 0.3
            }
        }
    
    def _build_stage2_payload(self, target_uri: str, text_content: str, system_prompt: str) -> dict:
        """
        –ë—É–¥—É—î payload –¥–ª—è Stage2 –∑–∞–ø–∏—Ç—É
        
        Args:
            target_uri: URI —Ü—ñ–ª—å–æ–≤–æ–≥–æ —Å–∞–π—Ç—É
            text_content: –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∑ Stage1
            system_prompt: –°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ payload –¥–ª—è API
        """
        user_message = f"Analyze content review of website {target_uri}: {text_content}"
        
        payload = {
            "contents": [
                {
                    "role": "user",
                    "parts": [
                        {"text": user_message}
                    ]
                }
            ],
            "generationConfig": {
                "temperature": 0.3,
                "responseMimeType": "application/json"
            },
            "systemInstruction": {
                "parts": [
                    {"text": system_prompt}
                ]
            }
        }
        
        # –î–æ–¥–∞—î–º–æ —Å—Ö–µ–º—É —è–∫—â–æ –≤–æ–Ω–∞ —î
        if self.stage2_schema:
            payload["generationConfig"]["responseSchema"] = self.stage2_schema
        
        return payload
    
    async def analyze_content(self, 
                            target_uri: str, 
                            api_key: str, 
                            proxy_config: ProxyConfig,
                            stage1_prompt: str,
                            use_google_search: bool = True) -> dict:
        """
        Stage1: –ê–Ω–∞–ª—ñ–∑—É—î –≤–µ–±-—Å–∞–π—Ç —Ç–∞ –æ—Ç—Ä–∏–º—É—î –π–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ urlContext —Ç–∞ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ Google Search
        
        Args:
            target_uri: URI —Ü—ñ–ª—å–æ–≤–æ–≥–æ —Å–∞–π—Ç—É
            api_key: API –∫–ª—é—á –¥–ª—è Gemini
            proxy_config: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–æ–∫—Å—ñ
            stage1_prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            use_google_search: –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Google Search —Ä–∞–∑–æ–º –∑ URL Context
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª—ñ–∑—É:
            {
                "success": bool,
                "grounding_status": str,
                "text_response": str,
                "status_code": int,
                "response_time": float,
                "error": str (—è–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞)
            }
        """
        url = f"https://generativelanguage.googleapis.com/v1beta/models/{self.stage1_model}:generateContent?key={api_key}"
        payload = self._build_stage1_payload(target_uri, stage1_prompt, use_google_search)
        
        start_time = asyncio.get_event_loop().time()
        
        try:
            response, resp_data = await self._make_request(
                proxy_config, url, payload, "stage1"
            )
            
            end_time = asyncio.get_event_loop().time()
            response_time = end_time - start_time
            
            if response.status == 200:
                if isinstance(resp_data, dict):
                    grounding_status, text_response = self._parse_stage1_response(resp_data)
                else:
                    return {
                        "success": False,
                        "grounding_status": "NON_JSON_RESPONSE",
                        "text_response": "",
                        "error": f"API returned HTML instead of JSON: {resp_data}",
                        "status_code": response.status,
                        "response_time": response_time
                    }
                
                return {
                    "success": True,
                    "grounding_status": grounding_status,
                    "text_response": text_response,
                    "status_code": response.status,
                    "response_time": response_time
                }
            else:
                formatted_error = self.format_api_error(str(resp_data))
                return {
                    "success": False,
                    "grounding_status": "HTTP_ERROR",
                    "text_response": "",
                    "error": f"HTTP {response.status}: {formatted_error}",
                    "status_code": response.status,
                    "response_time": response_time
                }
                        
        except Exception as e:
            end_time = asyncio.get_event_loop().time()
            response_time = end_time - start_time
            
            error_details = classify_exception(e)
            
            error_msg = str(e)
            if "{" in error_msg and "}" in error_msg:
                try:
                    json_start = error_msg.find("{")
                    json_part = error_msg[json_start:]
                    formatted_error = self.format_api_error(json_part)
                    error_msg = error_msg[:json_start] + formatted_error
                except:
                    pass
            
            return {
                "success": False,
                "grounding_status": "EXCEPTION",
                "text_response": "",
                "error": f"Request failed: {error_msg}",
                "exception": e,
                "error_details": error_details,
                "status_code": None,
                "response_time": response_time
            }
    
    async def analyze_business(self, 
                             target_uri: str, 
                             text_content: str, 
                             api_key: str, 
                             proxy_config: ProxyConfig,
                             system_prompt: str) -> dict:
        """
        Stage2: –°—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –±—ñ–∑–Ω–µ—Å-–∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤–µ–±-—Å–∞–π—Ç—É
        
        Args:
            target_uri: URI —Ü—ñ–ª—å–æ–≤–æ–≥–æ —Å–∞–π—Ç—É
            text_content: –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∑ Stage1
            api_key: API –∫–ª—é—á –¥–ª—è Gemini
            proxy_config: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–æ–∫—Å—ñ
            system_prompt: –°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª—ñ–∑—É:
            {
                "success": bool,
                "status_code": int,
                "response_time": float,
                "result": dict (—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ),
                "error": str (—è–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞)
            }
        """
        url = f"https://generativelanguage.googleapis.com/v1beta/models/{self.stage2_model}:generateContent?key={api_key}"
        payload = self._build_stage2_payload(target_uri, text_content, system_prompt)
        
        start_time = asyncio.get_event_loop().time()

        try:
            response, resp_data = await self._make_request(
                proxy_config, url, payload, "stage2", STAGE2_TIMEOUT_SECONDS
            )
            
            end_time = asyncio.get_event_loop().time()
            response_time = end_time - start_time
            
            if response.status == 200:
                if not isinstance(resp_data, dict):
                    return {
                        "success": False,
                        "status_code": 200,
                        "response_time": response_time,
                        "error": f"API returned HTML instead of JSON: {resp_data}"
                    }
                    
                candidates = resp_data.get("candidates", [])
                if not candidates:
                    return {
                        "success": False, 
                        "status_code": 200, 
                        "response_time": response_time, 
                        "error": "No candidates in response"
                    }
                
                content = candidates[0].get("content", {})
                parts = content.get("parts", [])
                if not parts:
                    return {
                        "success": False, 
                        "status_code": 200, 
                        "response_time": response_time, 
                        "error": "No parts in content"
                    }
                
                text = parts[0].get("text")
                if not text:
                    return {
                        "success": False, 
                        "status_code": 200, 
                        "response_time": response_time, 
                        "error": "No text in parts"
                    }
                
                try:
                    parsed_result = json.loads(text)
                    return {
                        "success": True, 
                        "status_code": 200, 
                        "response_time": response_time, 
                        "result": parsed_result
                    }
                except json.JSONDecodeError:
                    return {
                        "success": False, 
                        "status_code": 200, 
                        "response_time": response_time, 
                        "error": "Invalid JSON in response"
                    }
                            
            else:
                formatted_error = self.format_api_error(str(resp_data))
                return {
                    "success": False, 
                    "status_code": response.status, 
                    "response_time": response_time, 
                    "error": f"HTTP {response.status}: {formatted_error}"
                }
                        
        except Exception as e:
            end_time = asyncio.get_event_loop().time()
            response_time = end_time - start_time
            
            error_details = classify_exception(e)
            
            error_msg = str(e)
            if "{" in error_msg and "}" in error_msg:
                try:
                    json_start = error_msg.find("{")
                    json_part = error_msg[json_start:]
                    formatted_error = self.format_api_error(json_part)
                    error_msg = error_msg[:json_start] + formatted_error
                except:
                    pass
            
            return {
                "success": False, 
                "status_code": None, 
                "response_time": response_time, 
                "error": f"Request failed: {error_msg}", 
                "exception": e,
                "error_details": error_details
            }
    
    async def test_connection(self, api_key: str, proxy_config: ProxyConfig, use_google_search: bool = True) -> dict:
        """
        –¢–µ—Å—Ç—É—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Gemini API
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            proxy_config: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–æ–∫—Å—ñ
            use_google_search: –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Google Search
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç—É
        """
        test_prompt = "Say 'Hello, Gemini API is working!' in exactly these words."
        
        try:
            result = await self.analyze_content(
                "https://www.google.com", 
                api_key, 
                proxy_config, 
                test_prompt,
                use_google_search
            )
            
            if result["success"] and "Hello, Gemini API is working!" in result.get("text_response", ""):
                return {"success": True, "message": "API connection successful"}
            else:
                return {"success": False, "message": f"API test failed: {result.get('error', 'Unknown error')}"}
                
        except Exception as e:
            return {"success": False, "message": f"Connection test failed: {str(e)}"}
    
    def get_usage_stats(self) -> dict:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
        
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
        """
        return {
            "stage1_model": self.stage1_model,
            "stage2_model": self.stage2_model,
            "has_schema": bool(self.stage2_schema),
            "schema_fields": len(self.stage2_schema.get("properties", {})) if self.stage2_schema else 0,
            "stage1_features": ["urlContext", "googleSearch"],
            "stage2_features": ["JSON_schema", "systemInstruction"],
            "timing_intervals": {
                "start_delay_ms": self.start_delay_ms,  # üÜï –¢–ï–ü–ï–† –î–ò–ù–ê–ú–Ü–ß–ù–ò–ô
                "max_concurrent": MAX_CONCURRENT_STARTS
            }
        }


# üÜï –û–ù–û–í–õ–ï–ù–Ü –§–ê–ë–†–ò–ß–ù–Ü –§–£–ù–ö–¶–Ü–á –ó start_delay_ms
def create_gemini_client(stage2_schema: Optional[dict] = None, start_delay_ms: int = DEFAULT_START_DELAY_MS) -> GeminiClient:
    """
    –°—Ç–≤–æ—Ä—é—î GeminiClient –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    
    Args:
        stage2_schema: JSON —Å—Ö–µ–º–∞ –¥–ª—è Stage2 (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        start_delay_ms: –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π GeminiClient
    """
    return GeminiClient(
        stage1_model=DEFAULT_STAGE1_MODEL,
        stage2_model=DEFAULT_STAGE2_MODEL,
        stage2_schema=stage2_schema,
        start_delay_ms=start_delay_ms
    )


def create_custom_gemini_client(stage1_model: str, 
                               stage2_model: str, 
                               stage2_schema: Optional[dict] = None,
                               start_delay_ms: int = DEFAULT_START_DELAY_MS) -> GeminiClient:
    """
    –°—Ç–≤–æ—Ä—é—î GeminiClient –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    
    Args:
        stage1_model: –ú–æ–¥–µ–ª—å –¥–ª—è Stage1
        stage2_model: –ú–æ–¥–µ–ª—å –¥–ª—è Stage2
        stage2_schema: JSON —Å—Ö–µ–º–∞ –¥–ª—è Stage2 (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        start_delay_ms: –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π GeminiClient
    """
    return GeminiClient(
        stage1_model=stage1_model,
        stage2_model=stage2_model,
        stage2_schema=stage2_schema,
        start_delay_ms=start_delay_ms
    )


if __name__ == "__main__":
    # –†–µ–∞–ª—å–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è –∑ –∑–∞–ø–∏—Ç–∞–º–∏ –¥–æ Gemini API
    import asyncio
    from pathlib import Path
    import json
    import sys
    
    async def test_with_mongo_credentials():
        """–¢–µ—Å—Ç –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º API –∫–ª—é—á–∞ —Ç–∞ –ø—Ä–æ–∫—Å—ñ –∑ MongoDB"""
        print("=== Gemini Client Auto Test (MongoDB credentials) ===\n")
        
        try:
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ mongo_operations
            from mongo_operations import get_api_key_and_proxy
            from motor.motor_asyncio import AsyncIOMotorClient
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ mongo config
            config_path = Path(__file__).parent.parent.parent / "config" / "mongo_config.json"
            with config_path.open("r", encoding="utf-8") as f:
                mongo_config = json.load(f)
            
            # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—å –¥–æ MongoDB
            api_db_uri = mongo_config["databases"]["main_db"]["uri"]
            client_params = mongo_config["client_params"]
            mongo_client = AsyncIOMotorClient(api_db_uri, **client_params)
            
            print("‚úì Connected to MongoDB")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ API –∫–ª—é—á —Ç–∞ –ø—Ä–æ–∫—Å—ñ
            api_key, proxy_config, key_record_id, key_rec = await get_api_key_and_proxy(mongo_client)
            print(f"‚úì Got API key: {api_key[:8]}...{api_key[-4:]}")
            print(f"‚úì Got proxy: {proxy_config.connection_string}")
            
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ MongoDB –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            mongo_client.close()
            
            return api_key, proxy_config
            
        except Exception as e:
            print(f"‚ùå MongoDB error: {e}")
            print("üí° Make sure MongoDB is running and config is correct")
            return None, None
    
    async def test_with_manual_credentials():
        """–¢–µ—Å—Ç –∑ —Ä—É—á–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞"""
        print("=== Gemini Client Manual Test (CLI parameters) ===\n")
        
        if len(sys.argv) < 4:
            print("‚ùå Not enough parameters for manual test")
            print("Usage: python gemini_client.py <API_KEY> <PROXY_PROTOCOL> <PROXY_IP:PORT> [USERNAME:PASSWORD]")
            return None, None
        
        api_key = sys.argv[1]
        proxy_protocol = sys.argv[2]
        proxy_address = sys.argv[3]
        proxy_auth = sys.argv[4] if len(sys.argv) > 4 else None
        
        # –ü–∞—Ä—Å–∏–º–æ proxy –∞–¥—Ä–µ—Å—É
        try:
            if ":" in proxy_address:
                proxy_ip, proxy_port = proxy_address.split(":", 1)
                proxy_port = int(proxy_port)
            else:
                print("‚ùå Invalid proxy format. Use IP:PORT")
                return None, None
        except ValueError:
            print("‚ùå Invalid proxy port. Must be integer")
            return None, None
        
        # –ü–∞—Ä—Å–∏–º–æ auth —è–∫—â–æ —î
        proxy_username = None
        proxy_password = None
        if proxy_auth and ":" in proxy_auth:
            proxy_username, proxy_password = proxy_auth.split(":", 1)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ proxy config
        try:
            proxy_config = ProxyConfig(
                protocol=proxy_protocol,
                ip=proxy_ip,
                port=proxy_port,
                username=proxy_username,
                password=proxy_password
            )
            print(f"‚úì Manual proxy config: {proxy_config.connection_string}")
            return api_key, proxy_config
        except Exception as e:
            print(f"‚ùå Proxy config error: {e}")
            return None, None
    
    async def run_gemini_test(api_key, proxy_config):
        """–í–∏–∫–æ–Ω—É—î —Ñ–∞–∫—Ç–∏—á–Ω—ñ —Ç–µ—Å—Ç–∏ –∑ Gemini API"""
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ö–µ–º—É
        try:
            schema_path = Path(__file__).parent.parent.parent / "config" / "stage2_schema.json"
            with schema_path.open("r", encoding="utf-8") as f:
                schema = json.load(f)
            print(f"‚úì Schema loaded: {len(schema.get('properties', {}))} fields")
        except Exception as e:
            print(f"‚ö† Could not load schema: {e}")
            schema = {}
        
        # üÜï –°–¢–í–û–†–Æ–Ñ–ú–û –ö–õ–Ü–Ñ–ù–¢ –ó –ö–ê–°–¢–û–ú–ù–û–Æ –ü–ê–£–ó–û–Æ (500ms –¥–ª—è —Ç–µ—Å—Ç—É)
        client = create_gemini_client(schema, start_delay_ms=500)
        print(f"‚úì GeminiClient created with {client.start_delay_ms}ms delay")
        
        # –¢–µ—Å—Ç–æ–≤–∏–π —Å–∞–π—Ç —ñ –ø—Ä–æ–º–ø—Ç–∏
        test_uri = "https://www.shopify.com"
        stage1_prompt = "Analyze this website and provide detailed information about its content, purpose, and functionality."
        
        print(f"\nüîç Testing website: {test_uri}")
        print("=" * 60)
        
        # === STAGE 1 TEST ===
        print("\nüìñ STAGE 1 - Content Analysis:")
        print("-" * 40)
        
        try:
            # üéØ –°–ü–ï–¶–Ü–ê–õ–¨–ù–ò–ô –í–ò–ö–õ–ò–ö –î–õ–Ø –û–¢–†–ò–ú–ê–ù–ù–Ø –°–ò–†–û–á –í–Ü–î–ü–û–í–Ü–î–Ü STAGE1
            url = f"https://generativelanguage.googleapis.com/v1beta/models/{client.stage1_model}:generateContent?key={api_key}"
            payload = client._build_stage1_payload(test_uri, stage1_prompt)
            
            print("üîß Making raw Stage1 request...")
            start_time = asyncio.get_event_loop().time()
            
            response, resp_data = await client._make_request(
                proxy_config, url, payload, "stage1"
            )
            
            end_time = asyncio.get_event_loop().time()
            response_time = end_time - start_time
            
            print(f"Status: {'‚úì SUCCESS' if response.status == 200 else '‚ùå FAILED'}")
            print(f"Response time: {response_time:.2f}s")
            print(f"Status code: {response.status}")
            
            if response.status == 200 and isinstance(resp_data, dict):
                print(f"\nüìÑ RAW STAGE1 RESPONSE (Full API Response):")
                print("=" * 50)
                print(json.dumps(resp_data, indent=2, ensure_ascii=False))
                print("=" * 50)
                
                # –í–∏—Ç—è–≥—É—î–º–æ grounding status —Ç–∞ —Ç–µ–∫—Å—Ç
                candidates = resp_data.get("candidates", [])
                if candidates:
                    candidate = candidates[0]
                    text_response = candidate.get("content", {}).get("parts", [{}])[0].get("text", "")
                    url_metadata = candidate.get("urlContextMetadata", {}).get("urlMetadata", [])
                    grounding_status = url_metadata[0].get("urlRetrievalStatus", "UNKNOWN") if url_metadata else "NO_URL_METADATA"
                    
                    print(f"üéØ Grounding status: {grounding_status}")
                    
                    if text_response:
                        print(f"\nüìÑ EXTRACTED TEXT FROM STAGE1:")
                        print("=" * 50)
                        print(text_response)
                        print("=" * 50)
                        
                        # === STAGE 2 TEST ===
                        print("\nüß† STAGE 2 - Business Analysis:")
                        print("-" * 40)
                        
                        # –ü—Ä–æ—Å—Ç–∏–π system prompt –¥–ª—è —Ç–µ—Å—Ç—É
                        system_prompt = """You are a website analyzer. Analyze the provided content and return structured business information in JSON format according to the provided schema."""
                        
                        try:
                            # üéØ –°–ü–ï–¶–Ü–ê–õ–¨–ù–ò–ô –í–ò–ö–õ–ò–ö –î–õ–Ø –û–¢–†–ò–ú–ê–ù–ù–Ø –°–ò–†–û–ì–û JSON
                            url = f"https://generativelanguage.googleapis.com/v1beta/models/{client.stage2_model}:generateContent?key={api_key}"
                            payload = client._build_stage2_payload(test_uri, text_response, system_prompt)
                            
                            print("üîß Making raw Stage2 request...")
                            start_time = asyncio.get_event_loop().time()
                            
                            response, resp_data = await client._make_request(
                                proxy_config, url, payload, "stage2", STAGE2_TIMEOUT_SECONDS
                            )
                            
                            end_time = asyncio.get_event_loop().time()
                            response_time = end_time - start_time
                            
                            print(f"Status: {'‚úì SUCCESS' if response.status == 200 else '‚ùå FAILED'}")
                            print(f"Response time: {response_time:.2f}s")
                            print(f"Status code: {response.status}")
                            
                            if response.status == 200 and isinstance(resp_data, dict):
                                print(f"\nüìä RAW STAGE2 RESPONSE (Full API Response):")
                                print("=" * 50)
                                print(json.dumps(resp_data, indent=2, ensure_ascii=False))
                                print("=" * 50)
                                
                                # –ü–æ–∫–∞–∑—É—î–º–æ –¢–Ü–õ–¨–ö–ò —Å–∏—Ä–∏–π JSON —Ç–µ–∫—Å—Ç –≤—ñ–¥ Gemini
                                candidates = resp_data.get("candidates", [])
                                if candidates:
                                    content = candidates[0].get("content", {})
                                    parts = content.get("parts", [])
                                    if parts:
                                        raw_json_text = parts[0].get("text", "")
                                        print(f"\nüéØ EXTRACTED JSON FROM STAGE2:")
                                        print("=" * 50)
                                        print(raw_json_text)
                                        print("=" * 50)
                                        
                                        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É
                                        try:
                                            parsed_json = json.loads(raw_json_text)
                                            print(f"\n‚úÖ JSON parsing: SUCCESS ({len(parsed_json)} fields)")
                                        except json.JSONDecodeError as e:
                                            print(f"‚ùå JSON parsing FAILED: {e}")
                                    else:
                                        print(f"‚ùå No parts in content")
                                else:
                                    print(f"‚ùå No candidates in response")
                            else:
                                print(f"‚ùå Stage2 HTTP error: {response.status}")
                                if isinstance(resp_data, str):
                                    print(f"Response: {resp_data[:500]}...")
                            
                        except Exception as e:
                            print(f"‚ùå Stage2 exception: {e}")
                    else:
                        print(f"‚ùå No text content in Stage1 response")
                else:
                    print(f"‚ùå No candidates in Stage1 response")
            else:
                print(f"‚ùå Stage1 HTTP error: {response.status}")
                if isinstance(resp_data, str):
                    print(f"Response: {resp_data[:500]}...")
                
        except Exception as e:
            print(f"‚ùå Stage1 exception: {e}")
        
        print(f"\n" + "=" * 60)
        print("üéØ Test completed!")
        print("üìù This test shows RAW responses from Gemini API before any processing")
        print(f"‚è±Ô∏è  Used custom delay: {client.start_delay_ms}ms (configurable)")
    
    async def main_test():
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        if len(sys.argv) == 1:
            # –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ - –±–µ—Ä–µ–º–æ –∑ MongoDB
            api_key, proxy_config = await test_with_mongo_credentials()
        else:
            # –ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ - —Ä—É—á–Ω–∏–π —Ä–µ–∂–∏–º
            api_key, proxy_config = await test_with_manual_credentials()
        
        if api_key and proxy_config:
            await run_gemini_test(api_key, proxy_config)
        else:
            print("\nüí° Usage options:")
            print("1. Auto mode: python gemini_client.py")
            print("   (uses random API key + proxy from MongoDB)")
            print("2. Manual mode: python gemini_client.py <API_KEY> <PROXY_PROTOCOL> <PROXY_IP:PORT> [USERNAME:PASSWORD]")
            print("   Example: python gemini_client.py AIz... http 1.2.3.4:8080 user:pass")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç
    asyncio.run(main_test())